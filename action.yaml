name: "poetry install"
description: "Set up python, poetry and install dependencies"
inputs:
  poetry-version:
    description: "poetry version"
    required: true
  python-version:
    description: "python version"
    required: true
  artifactory-owner:
    description: "owner of AWS CodeArtifact artifactory"
    default: ""
  artifactory-domain:
    description: "domain of AWS CodeArtifact artifactory"
    default: ""
  install-extras:
    description: "use --all-extras to install optional extras of the package"
    default: "false"
  install-groups:
    description: "use --with to install the groups specified as a comma-separated list"
    default: ""
runs:
  using: "composite"
  steps:
    - name: Install venv
      if: ${{ runner.name != 'Hosted Agent' }}
      run: sudo apt-get -qq update && sudo apt-get install python3-venv -y
      shell: bash

    - name: Install pipx
      if: ${{ runner.name != 'Hosted Agent' }}
      run: |
        pip install --quiet --user pipx
        pipx ensurepath
      shell: bash

    - name: Install poetry
      run: pipx install poetry==${{ inputs.poetry-version }}
      shell: bash

    - name: Check for AWS CLI
      run: |
        if ! command -v aws &> /dev/null
        then
          echo "INSTALL_AWS=true" >> $GITHUB_ENV
        else
          echo "INSTALL_AWS=false" >> $GITHUB_ENV
        fi
      shell: bash

    - name: Connect to artifactory
      if: ${{ inputs.artifactory-owner != '' && inputs.artifactory-domain != '' }}
      uses: aisightgmbh/actions-connect-artifactory-pull@v1
      with:
        artifactory-owner: ${{ inputs.artifactory-owner }}
        artifactory-domain: ${{ inputs.artifactory-domain }}
        install-aws: ${{ env.INSTALL_AWS }}

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ inputs.python-version }}
        cache: "poetry"

    - name: Install dependencies with extras
      run: poetry install ${{ (inputs.install-extras != 'false') && '--all-extras' || '' }} ${{ inputs.install-groups && format('--with {0}', inputs.install-groups) || '' }}
      shell: bash
